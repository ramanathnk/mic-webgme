/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Thu Oct 20 2016 22:59:23 GMT-0500 (Central Daylight Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);
    /**
     * Initializes a new instance of MiniProject2.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin MiniProject2.
     * @constructor
     */
    var MiniProject2 = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
   
    MiniProject2.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    MiniProject2.prototype = Object.create(PluginBase.prototype);
    MiniProject2.prototype.constructor = MiniProject2;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    MiniProject2.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            artifact,
            nodeObject;


        self.makeTree(self.rootNode)
            .then(function (nodes) {

                var tree = self.printChildrenRec(self.rootNode, nodes);
                var treeStr = JSON.stringify(tree, null, 4);
                artifact = self.blobClient.createArtifact('project-data');
                self.logger.info('Tree', treeStr);


                var nodeArray = self.makeList(nodes);
                var nodeArrayStr = JSON.stringify(nodeArray, null, 4);
                self.logger.info('ArrayList',nodeArrayStr);

                return artifact.addFiles({'tree.json':treeStr,'meta.json':nodeArrayStr});
            })
            .then(function (artifactHash) {
                self.result.addArtifact(artifactHash);
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(function (err) {
                self.logger.error(err.stack);
                callback(err, self.result);
            }) ;
    };

    MiniProject2.prototype.makeTree = function (node) {
        var self = this;
        return self.core.loadSubTree(node)
            .then(function (array) {
                var nodeList = {},
                    i;
                for (i = 0; i < array.length; i += 1) {
                    nodeList[self.core.getPath(array[i])] = array[i];
                }
                return nodeList;
            });
    };

    MiniProject2.prototype.makeList = function (nodes) {
        var self = this,
            node,
			baseNode,
			pathToNode,
			nameAttribute,
            noOfChildren,
            list = []

        for (pathToNode in nodes) {
            node = nodes[pathToNode];
            if(self.getMetaType(node) === node)
            {
                nameAttribute = self.core.getAttribute(node,'name');
                pathToNode = self.core.getPath(node);
                noOfChildren = self.core.getChildrenPaths(node).length;
                baseNode = self.core.getPointerPath(node, 'base');
                if (baseNode !== null) {
                    baseNode = self.core.getAttribute(nodes[baseNode], 'name');
                }
                else
                    baseNode = "null";
                list.push({name: nameAttribute , path: pathToNode, noOfChildren: noOfChildren , base:baseNode});
            }
        }
        return list;
    };

    MiniProject2.prototype.printChildrenRec = function (root, nodes, indent) {
        var self = this,
            childrenPaths,
            childNode,
            name,
            attr,
            i,
            meta,

            tree = {
                    name: '',
                    isMeta: '',
                    metaType: '',
                    children:{}
            };

        tree.name = self.core.getAttribute(root, 'name');
		
		childrenPaths = self.core.getChildrenPaths(root);

        if(root != self.rootNode) {
          
			
		self.getMetaType(root) === root ? tree.isMeta = 'true' : tree.isMeta = 'false';

            meta = self.getMetaType(root);
            tree.metaType = self.core.getAttribute(meta, 'name');


            if (self.isMetaTypeOf(root,self.META.something) || self.isMetaTypeOf(root,self.META.Something1) || self.isMetaTypeOf(root,self.META.Something)) {

                var srcPointerPath = self.core.getPointerPath(root, 'src');
                var dstPointerPath = self.core.getPointerPath(root, 'dst');

                 if (srcPointerPath && dstPointerPath) {
                    var src = nodes[srcPointerPath];
                    var dst = nodes[dstPointerPath];
                    tree.src = self.core.getAttribute(src, 'name');
                    tree.dst = self.core.getAttribute(dst, 'name');
                }
            }
        }

        for (i = 0; i < childrenPaths.length; i++) {
            childNode = nodes[childrenPaths[i]];
            tree.children[self.core.getRelid(childNode)] = self.printChildrenRec(childNode, nodes, indent + '  ');
        }
        return tree;
    };
    return MiniProject2;
});